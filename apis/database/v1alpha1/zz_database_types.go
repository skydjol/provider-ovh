/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseObservation struct {

	// Advanced configuration key / value.
	// Advanced configuration key / value
	AdvancedConfiguration map[string]*string `json:"advancedConfiguration,omitempty" tf:"advanced_configuration,omitempty"`

	// Time on which backups start every day.
	// Time on which backups start every day
	BackupTime *string `json:"backupTime,omitempty" tf:"backup_time,omitempty"`

	// Date of the creation of the cluster.
	// Date of the creation of the cluster
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Small description of the database service.
	// Description of the cluster
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The disk size (in GB) of the database service.
	// Disk size attributes of the cluster
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Defines the disk type of the database service.
	// Disk type attributes of the cluster
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// List of all endpoints objects of the service.
	// List of all endpoints of the service
	Endpoints []EndpointsObservation `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// The database engine you want to deploy. To get a full list of available engine visit.
	// public documentation.
	// Name of the engine of the service
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// A valid OVHcloud public cloud database flavor name in which the nodes will be started.
	// Ex: "db1-7". Changing this value upgrade the nodes with the new flavor.
	// You can find the list of flavor names: https://www.ovhcloud.com/fr/public-cloud/prices/
	// The node flavor used for this cluster
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Public Cloud Database Service ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Defines whether the REST API is enabled on a kafka cluster
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestAPI *bool `json:"kafkaRestApi,omitempty" tf:"kafka_rest_api,omitempty"`

	// Time on which maintenances can start every day.
	// Time on which maintenances can start every day
	MaintenanceTime *string `json:"maintenanceTime,omitempty" tf:"maintenance_time,omitempty"`

	// Type of network of the cluster.
	// Type of network of the cluster
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// List of nodes object.
	// Multi region cluster are not yet available, all node should be identical.
	// List of nodes composing the service
	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// Defines whether the ACLs are enabled on an OpenSearch cluster
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled *bool `json:"opensearchAclsEnabled,omitempty" tf:"opensearch_acls_enabled,omitempty"`

	// Plan of the cluster.
	// Enum: "essential", "business", "enterprise".
	// Plan of the cluster
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// The id of the public cloud project. If omitted,
	// the OVH_CLOUD_PROJECT_SERVICE environment variable is used.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Current status of the cluster.
	// Current status of the cluster
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The version of the engine in which the service should be deployed
	// Version of the engine deployed on the cluster
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DatabaseParameters struct {

	// Advanced configuration key / value.
	// Advanced configuration key / value
	// +kubebuilder:validation:Optional
	AdvancedConfiguration map[string]*string `json:"advancedConfiguration,omitempty" tf:"advanced_configuration,omitempty"`

	// Small description of the database service.
	// Description of the cluster
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The disk size (in GB) of the database service.
	// Disk size attributes of the cluster
	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// The database engine you want to deploy. To get a full list of available engine visit.
	// public documentation.
	// Name of the engine of the service
	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// A valid OVHcloud public cloud database flavor name in which the nodes will be started.
	// Ex: "db1-7". Changing this value upgrade the nodes with the new flavor.
	// You can find the list of flavor names: https://www.ovhcloud.com/fr/public-cloud/prices/
	// The node flavor used for this cluster
	// +kubebuilder:validation:Optional
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// Defines whether the REST API is enabled on a kafka cluster
	// Defines whether the REST API is enabled on a Kafka cluster
	// +kubebuilder:validation:Optional
	KafkaRestAPI *bool `json:"kafkaRestApi,omitempty" tf:"kafka_rest_api,omitempty"`

	// List of nodes object.
	// Multi region cluster are not yet available, all node should be identical.
	// List of nodes composing the service
	// +kubebuilder:validation:Optional
	Nodes []NodesParameters `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// Defines whether the ACLs are enabled on an OpenSearch cluster
	// Defines whether the ACLs are enabled on an Opensearch cluster
	// +kubebuilder:validation:Optional
	OpensearchAclsEnabled *bool `json:"opensearchAclsEnabled,omitempty" tf:"opensearch_acls_enabled,omitempty"`

	// Plan of the cluster.
	// Enum: "essential", "business", "enterprise".
	// Plan of the cluster
	// +kubebuilder:validation:Optional
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// The id of the public cloud project. If omitted,
	// the OVH_CLOUD_PROJECT_SERVICE environment variable is used.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// The version of the engine in which the service should be deployed
	// Version of the engine deployed on the cluster
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type EndpointsObservation struct {

	// Type of component the URI relates to.
	Component *string `json:"component,omitempty" tf:"component,omitempty"`

	// Domain of the cluster.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Path of the endpoint.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Connection port for the endpoint.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Defines whether the endpoint uses SSL.
	SSL *bool `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// SSL mode used to connect to the service if the SSL is enabled.
	SSLMode *string `json:"sslMode,omitempty" tf:"ssl_mode,omitempty"`

	// Scheme used to generate the URI.
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// URI of the endpoint.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type EndpointsParameters struct {
}

type NodesObservation struct {

	// Private network id in which the node should be deployed. It's the regional openstackId of the private network
	// Private network ID in which the node is. It's the regional openstackId of the private network.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Public cloud region in which the node should be deployed.
	// Ex: "GRA'.
	// Region of the node
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Private subnet ID in which the node is.
	// Private subnet ID in which the node is
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type NodesParameters struct {

	// Private network id in which the node should be deployed. It's the regional openstackId of the private network
	// Private network ID in which the node is. It's the regional openstackId of the private network.
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Public cloud region in which the node should be deployed.
	// Ex: "GRA'.
	// Region of the node
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Private subnet ID in which the node is.
	// Private subnet ID in which the node is
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

// DatabaseSpec defines the desired state of Database
type DatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseParameters `json:"forProvider"`
}

// DatabaseStatus defines the observed state of Database.
type DatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Database is the Schema for the Databases API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ovh}
type Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.engine)",message="engine is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.flavor)",message="flavor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.nodes)",message="nodes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.plan)",message="plan is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.serviceName)",message="serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.version)",message="version is a required parameter"
	Spec   DatabaseSpec   `json:"spec"`
	Status DatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseList contains a list of Databases
type DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Database `json:"items"`
}

// Repository type metadata.
var (
	Database_Kind             = "Database"
	Database_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Database_Kind}.String()
	Database_KindAPIVersion   = Database_Kind + "." + CRDGroupVersion.String()
	Database_GroupVersionKind = CRDGroupVersion.WithKind(Database_Kind)
)

func init() {
	SchemeBuilder.Register(&Database{}, &DatabaseList{})
}
